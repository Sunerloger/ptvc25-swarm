#pragma once

#include "../GameObject.h"
#include "../vk/vk_model.h"
#include "LSystem.h"
#include "TreeMaterial.h"
#include <memory>
#include <glm/glm.hpp>

namespace procedural {

	// A game object that represents vegetation generated by L-Systems
	class VegetationObject : public vk::GameObject {
	   public:
		VegetationObject(
			vk::Device& device,
			const LSystemGeometry& geometry,
			const glm::vec3& position = glm::vec3(0.0f),
			const glm::vec3& scale = glm::vec3(1.0f));

		// Constructor for TreeGeometry with separate materials
		VegetationObject(
			vk::Device& device,
			const TreeGeometry& treeGeometry,
			const TreeMaterial& treeMaterial,
			const glm::vec3& position = glm::vec3(0.0f),
			const glm::vec3& scale = glm::vec3(1.0f));

		virtual ~VegetationObject() = default;

		// GameObject interface
		glm::mat4 computeModelMatrix() const override;
		glm::mat4 computeNormalMatrix() const override;
		glm::vec3 getPosition() const override;
		std::shared_ptr<vk::Model> getModel() const override;

		// For multi-material trees
		std::shared_ptr<vk::Model> getBarkModel() const;
		std::shared_ptr<vk::Model> getLeafModel() const;
		bool hasMultipleMaterials() const;
		glm::vec3 getScale() const;

		// Static factory method for tree vegetation (legacy)
		static std::unique_ptr<VegetationObject> createTree(
			vk::Device& device,
			const glm::vec3& position,
			const glm::vec3& scale = glm::vec3(1.0f),
			int seed = 0);

		// Static factory method for enhanced tree with materials
		static std::unique_ptr<VegetationObject> createEnhancedTree(
			vk::Device& device,
			const TreeMaterial& treeMaterial,
			const glm::vec3& position,
			const glm::vec3& scale = glm::vec3(1.0f),
			int seed = 0);

		// Static factory method for tree vegetation with custom parameters
		static std::unique_ptr<VegetationObject> createTree(
			vk::Device& device,
			const glm::vec3& position,
			const glm::vec3& scale,
			int seed,
			int iterations,
			const std::string& axiom,
			const TurtleParameters& turtleParams);

	   private:
		std::shared_ptr<vk::Model> model;
		std::shared_ptr<vk::Model> barkModel;
		std::shared_ptr<vk::Model> leafModel;
		bool multipleMaterials = false;
		glm::vec3 position{0.0f};
		glm::vec3 scale{1.0f};

		// Create a model from L-System geometry
		static std::shared_ptr<vk::Model> createModelFromGeometry(
			vk::Device& device,
			const LSystemGeometry& geometry);

		// Create models from TreeGeometry
		static std::pair<std::shared_ptr<vk::Model>, std::shared_ptr<vk::Model>>
		createModelsFromTreeGeometry(
			vk::Device& device,
			const TreeGeometry& treeGeometry);
	};
};	// namespace procedural
